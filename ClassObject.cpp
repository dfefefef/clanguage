/*
	类定义
		类成员访问范围关键词
		private：只能通过成员函数访问，不能在成员函数外部访问，实现数据“隐藏”，
		public：可以在任何地方访问
		protected：保护乘员
		关键字缺省时默认为private

	成员函数可以访问当前对象的全部属性和函数，也可以访问同类的对象的全部成员函数和对象。

	构造函数
		无返回值，void也不行
		缺省默认构造函数不做任何操作，使用构造函数进行初始化，
		一个类定义必须要初始化，利用构造函数不用专门进行初始化。
		定义构造函数后，编译器不再生成默认构造函数，此时定义对象时必须调用指定的构造函数

	例子：
	class Test
	{

		Test()
		{	
		}
		Test(int a)
		{
		}
		Test(int a, int b)
		{
		}
		
	}

	Test Array[3] = {1,2}//生成三个对象分别用1，2，3构造函数来生成
	Test *array[3] = {new Test(1), new Test(1, 2)}//生成两个对象，分别用1，2构造函数来生成
		
-----------------------------------------------------------------------------------------------------
	
	复制构造函数
		要么自己编写(默认构造函数不存在)，要么编译器生成默认构造函数（初始化为一样的对象）
		constructer(const T&)

		1.在定义对象时使用‘=’对对象之间赋值(而已近定义的对象之间进行赋值的操作不会调用复制构造函数);
		2.对象作为参数传递时候会调用复制构造函数;
		3.函数的返回值是对象的时候调用

----------------------------------------------------------------------------------------------------------

	类型转换构造函数
		
----------------------------------------------------------------------------------------------------------

	析构函数
		一个类只能有一个析构函数,没有参数和返回值;
		对象消亡时自动调用析构函数,缺省析构函数不做任何操作
		自定义析构函数,用于清除内存,析构函数在对象作为函数参数返回时候被调用

----------------------------------------------------------------------------------------------------------
	
局部变量的生存期:
		全局对象在main执行前初始化


this指针：
	C++翻译到C时候，this指针用来帮助翻译类的成员函数翻译成全局函数，this用来指针指向成员函数所作用于的对象。
	注意静态成员函数不做用于任何对象，所以静态成员函数不能使用this指针



静态成员：
	静态成员变量
		一个类的所有对象共有的变量，sizeof 不会计算静态成员变量，
		在定义静态成员的文件中，需要在类外对成员变量进行声明，否则不能通过链接
	
	静态成员函数
		不具体作用于某个对象，注意静态成员函数不能访问非静态成员变量和非静态成员函数

	静态成员可以不通过对象来访问，直接通过类名访问，T::PrintTotal(),还可以通过对象，对象指针对象应用来访问，
	将类的全局变量用静态成员来表示，便于维护和管理。


封闭类和成员对象
	对于封闭类，在类的构造函数中给出成员对象初始化的方法，如果不给出默认为无参构造函数，成员对象对应的类如果不存在
	无参构造函数，那么编译器将报错

	封闭类的构造函数和析构函数的调用次序：
	1.封闭类构造时，先调用成员对象的构造函数（次序为成员对象在封闭类当中的声明顺序，与构造函数中成员初始化列表成员
	对象的构造函数出现的顺序无关）再调用封闭类的构造函数，
	2.封闭类消亡时，先调用封闭类的析构函数再调用成员对象的析构函数（按照先构造后析构的顺序）

	封闭类的复制构造函数
		调用封闭类的复制构造函数时，（如果封闭类没有定义复制构造函数，则会调用成员对象的复制构造函数，
		如果封闭类定义了复制构造函数，则会在调用封闭类复制构造函数的时候调用成员对象的无参构造函数）

		------------------------------------<>-----------------------------------------------

常量对象
	常量对象的成员变量的值不能被修改
	常量对象和常量成员函数对应，使用常量对象只能调用常量成员函数和静态成员函数

常量成员函数
	常量成员函数不能修改其作用的对象
	常量成员函数不能修改成员变量的值（静态成员变量除外）
	常量成员函数不能调用成员函数（静态成员变量除外）

成员函数的重载
	函数名相同的成员函数，参数表相同，但有const声明的区别，这属于成员函数的重载


常引用
	用常引用作为函数参数传递对象时，既能节省直接用对象传参过程中使用构造函数产生的开销，又能保证引用的对象不被修改
	void A(const T &a)

	---------------------------------------------<>----------------------------------------

友元函数
	在一个类里面声明另一个类的成员函数或者全局函数为自己友元函数，这时友元函数可以访问这个类的私有成员
	friend A::fun();

友元类
	把一个类声明为自己的友元类时，这个类可以访问自己的私有成员
	friend class A;
*/
